#include "display.h"
#include <avr/pgmspace.h>

Display display;

const int *const lineData[] PROGMEM = {  // character (number of points + starting offset)
  // k, m, n, q, r, v, w, x, z, 2, 4, 7 
  1, 0, 2, 0, 0, 1, 0, 6, 3, 1, 3, 6, 1, 4, 2, 4, // A (16 + 0)
  0, 0, 0, 6, 1, 0, 2, 0, 1, 3, 2, 3, 1, 6, 2, 6, 3, 1, 3, 2, 3, 4, 3, 5, // B (24 + 16)
  0, 1, 0, 5, 1, 0, 2, 0, 3, 1, 3, 1, 1, 6, 2, 6, 3, 5, 3, 5, // C (20 + 40)
  0, 0, 0, 6, 1, 0, 2, 0, 1, 6, 2, 6, 3, 1, 3, 5, // D (16 + 60)
  0, 0, 0, 6, 1, 0, 3, 0, 1, 3, 2, 3, 1, 6, 3, 6,  // E (16 + 76)
  0, 0, 0, 6, 1, 0, 3, 0, 1, 3, 2, 3,  // F (12 + 92)
  0, 1, 0, 5, 1, 0, 2, 0, 3, 1, 3, 1, 1, 6, 2, 6, 3, 3, 3, 5, 2, 3, 2, 3, // G (24 + 104)
  0, 0, 0, 6, 1, 3, 2, 3, 3, 0, 3, 6,  // H (12 + 128)
  0, 0, 0, 6, // I (4 + 140)
  3, 0, 3, 5, 2, 6, 1, 6, 0, 5, 0, 5,  // J (12 + 144)
  0, 0, 0, 6, 1, 2, 3, 0, 1, 4, 3, 6,  // K (12 + 156)
  0, 0, 0, 6, 1, 6, 3, 6, // L (8 + 168)
  0, 0, 0, 6, 1, 1, 2, 2, 3, 1, 3, 1, 4, 0, 4, 6, // M (16 + 176)
  0, 0, 0, 6, 0, 0, 4, 6, 4, 0, 4, 6, // N (12 + 192)
  0, 1, 0, 5, 1, 0, 2, 0, 3, 1, 3, 5, 1, 6, 2, 6, // O (16 + 204)
  0, 0, 0, 6, 1, 0, 2, 0, 1, 3, 2, 3, 3, 1, 3, 2, // P (16 + 220)
  0, 1, 0, 5, 1, 0, 2, 0, 3, 1, 3, 4, 1, 6, 1, 6, 2, 5, 3, 6, // Q (20 + 236)
  0, 0, 0, 6, 1, 0, 2, 0, 1, 3, 2, 3, 3, 1, 3, 2, 1, 4, 3, 6, // R (20 + 256)
  3, 1, 3, 1, 2, 0, 1, 0, 0, 1, 0, 2, 1, 3, 2, 3, 3, 4, 3, 5, 2, 6, 1, 6, 0, 5, 0, 5, // S (28 + 276)
  0, 0, 4, 0, 2, 1, 2, 6, // T (8 + 304)
  0, 0, 0, 5, 1, 6, 2, 6, 3, 0, 3, 5, // U (12 + 312)
  2, 6, 2, 4, 2, 4, 0, 0, 2, 4, 4, 0, // V (12 + 324)
  0, 0, 0, 6, 1, 5, 2, 4, 3, 5, 4, 6, 4, 5, 4, 0, // W (16 + 336)
  1, 2, 3, 4, 1, 4, 4, 1, 0, 0, 0, 1, 4, 0, 4, 1, 0, 5, 0, 6, 4, 5, 4, 6,  // X (24 + 352)
  2, 6, 2, 3, 1, 3, 1, 2, 0, 1, 0, 0, 3, 3, 3, 2, 4, 1, 4, 0, // Y (20 + 376)
  0, 0, 3, 0, 3, 1, 0, 4, 0, 5, 0, 5, 0, 6, 3, 6, // Z (16 + 396)
  0, 1, 0, 5, 1, 0, 2, 0, 3, 1, 3, 5, 1, 6, 2, 6, // 0 (16 + 412)
  0, 1, 0, 1, 1, 0, 1, 5, 0, 6, 2, 6, // 1 (12 + 428)
  0, 1, 0, 1, 1, 0, 2, 0, 3, 1, 3, 2, 2, 3, 0, 5, 0, 6, 0, 6, 1, 6, 3, 6, // 2 (24 + 440)
  0, 1, 0, 1, 1, 0, 2, 0, 3, 1, 3, 2, 1, 3, 2, 3, 3, 4, 3, 5, 1, 6, 2, 6, 0, 5, 0, 5, // 3 (28 + 464)
  4, 4, 4, 4, 3, 6, 3, 0, 2, 4, 0, 4, 0, 3, 0, 3, 1, 2, 1, 2, 2, 1, 2, 1, 3, 0, 3, 0, // 4 (16 + 492) + 12
  3, 0, 0, 0, 0, 1, 0, 2, 1, 2, 2, 2, 3, 3, 3, 5, 2, 6, 1, 6, 0, 5, 0, 5, // 5 (24 + 508) + 12
  3, 1, 3, 1, 2, 0, 1, 0, 0, 1, 0, 5, 1, 6, 2, 6, 3, 5, 3, 4, 2, 3, 1, 3, // 6 (24 + 532) + 12
  0, 0, 3, 0, 3, 1, 3, 2, 2, 3, 2, 4, 1, 5, 1, 6, // 7 (16 + 556) + 12
  1, 0, 2, 0, 0, 1, 0, 2, 3, 1, 3, 2, 1, 3, 2, 3, 0, 4, 0, 5, 3, 4, 3, 5, 1, 6, 2, 6, // 8 (28 + 572) + 12
  0, 1, 0, 2, 1, 0, 2, 0, 3, 1, 3, 5, 1, 3, 2, 3, 1, 6, 2, 6, // 9 (20 + 600) + 12
  0, 0, 0, 0, // space (4 + 620) + 12
  0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 1, 1, 0, 2, 0, 2, 2, 2, 2, 2, 1, 3, 1, 3, 0, 4, 0, 4, 2, 4, 2, 4, 1, 5, 1, 5, 0, 6, 0, 6, 2, 6, 2, 6, // unknown (44 + 624) + 12
  0, 5, 0, 6, 1, 5, 1, 6,  // . (8 + 668) + 12
};

// String format: Symbol (first character), number of lines (next 2 digits), width (next digit), starting line data offset (last 4 digits)
const int LENGTH_OF_CHAR_DATA = 8;
const char *const characterData[320] PROGMEM = {
// X indicates that I have not seen how this character is rendered on the real unit
'A','0','4','4','0','0','0','0',
'B','0','6','4','0','0','1','6',   // X
'C','0','5','4','0','0','4','0',
'D','0','4','4','0','0','6','0',   // X
'E','0','4','4','0','0','7','6',
'F','0','3','4','0','0','9','2',   // X
'G','0','6','4','0','1','0','4',
'H','0','3','4','0','1','2','8',
'I','0','1','1','0','1','4','0',
'J','0','3','4','0','1','4','4',  // X
'K','0','3','4','0','1','5','6',
'L','0','2','4','0','1','6','8',
'M','0','4','5','0','1','7','6',
'N','0','3','5','0','1','9','2',
'O','0','4','4','0','2','0','4',
'P','0','4','4','0','2','2','0',
'Q','0','5','4','0','2','3','6',
'R','0','5','4','0','2','5','6',
'S','0','7','4','0','2','7','6',
'T','0','2','5','0','3','0','4',
'U','0','3','4','0','3','1','2',
'V','0','3','5','0','3','2','4',
'W','0','4','5','0','3','3','6',  // X
'X','0','6','5','0','3','5','2',  // X
'Y','0','5','5','0','3','7','6',
'Z','0','4','4','0','3','9','6',
'0','0','4','4','0','4','1','2', // X
'1','0','3','3','0','4','2','8', // X
'2','0','6','4','0','4','4','0', // X
'3','0','7','4','0','4','6','4',
'4','0','4','5','0','4','9','2', // X
'5','0','6','4','0','5','0','8', // X
'6','0','6','4','0','5','3','2', // X
'7','0','4','4','0','5','5','6', // X
'8','0','7','4','0','5','7','2', // X
'9','0','5','4','0','6','0','0',
' ','0','0','1','0','6','2','0',
'\0','1','1','3','0','6','2','4',
'.','0','2','2','0','6','6','8'
};

struct Map {
  int getCharacterData(char character) {
    for (int i = 0; i < sizeof(characterData) / sizeof(char*); i += 8) {
      if ((char) pgm_read_word(&characterData[i]) == character) {
        return i;
      }
    }
    return 304;
  }
};
